/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: rs_ezpwd.i

package rs_ezpwd

/*
#define intgo swig_intgo
typedef void *swig_voidp;

#include <stdint.h>


typedef long long intgo;
typedef unsigned long long uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;


typedef long long swig_type_1;
typedef long long swig_type_2;
typedef long long swig_type_3;
typedef long long swig_type_4;
typedef long long swig_type_5;
typedef long long swig_type_6;
typedef long long swig_type_7;
typedef long long swig_type_8;
typedef long long swig_type_9;
typedef long long swig_type_10;
typedef long long swig_type_11;
typedef long long swig_type_12;
extern void _wrap_Swig_free_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1);
extern uintptr_t _wrap_Swig_malloc_rs_ezpwd_2e6af9f303f3009f(swig_intgo arg1);
extern uintptr_t _wrap_new_VecUInt8__SWIG_0_rs_ezpwd_2e6af9f303f3009f(void);
extern uintptr_t _wrap_new_VecUInt8__SWIG_1_rs_ezpwd_2e6af9f303f3009f(swig_type_1 arg1);
extern uintptr_t _wrap_new_VecUInt8__SWIG_2_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1);
extern swig_type_2 _wrap_VecUInt8_size_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1);
extern swig_type_3 _wrap_VecUInt8_capacity_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1);
extern void _wrap_VecUInt8_reserve_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1, swig_type_4 arg2);
extern _Bool _wrap_VecUInt8_isEmpty_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1);
extern void _wrap_VecUInt8_clear_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1);
extern void _wrap_VecUInt8_add_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1, char arg2);
extern char _wrap_VecUInt8_get_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1, swig_intgo arg2);
extern void _wrap_VecUInt8_set_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1, swig_intgo arg2, char arg3);
extern void _wrap_delete_VecUInt8_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1);
extern uintptr_t _wrap_new_VecInt__SWIG_0_rs_ezpwd_2e6af9f303f3009f(void);
extern uintptr_t _wrap_new_VecInt__SWIG_1_rs_ezpwd_2e6af9f303f3009f(swig_type_5 arg1);
extern uintptr_t _wrap_new_VecInt__SWIG_2_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1);
extern swig_type_6 _wrap_VecInt_size_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1);
extern swig_type_7 _wrap_VecInt_capacity_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1);
extern void _wrap_VecInt_reserve_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1, swig_type_8 arg2);
extern _Bool _wrap_VecInt_isEmpty_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1);
extern void _wrap_VecInt_clear_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1);
extern void _wrap_VecInt_add_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1, swig_intgo arg2);
extern swig_intgo _wrap_VecInt_get_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1, swig_intgo arg2);
extern void _wrap_VecInt_set_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1, swig_intgo arg2, swig_intgo arg3);
extern void _wrap_delete_VecInt_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1);
extern uintptr_t _wrap_new_VecVecUInt8__SWIG_0_rs_ezpwd_2e6af9f303f3009f(void);
extern uintptr_t _wrap_new_VecVecUInt8__SWIG_1_rs_ezpwd_2e6af9f303f3009f(swig_type_9 arg1);
extern uintptr_t _wrap_new_VecVecUInt8__SWIG_2_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1);
extern swig_type_10 _wrap_VecVecUInt8_size_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1);
extern swig_type_11 _wrap_VecVecUInt8_capacity_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1);
extern void _wrap_VecVecUInt8_reserve_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1, swig_type_12 arg2);
extern _Bool _wrap_VecVecUInt8_isEmpty_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1);
extern void _wrap_VecVecUInt8_clear_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1);
extern void _wrap_VecVecUInt8_add_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1, uintptr_t arg2);
extern uintptr_t _wrap_VecVecUInt8_get_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1, swig_intgo arg2);
extern void _wrap_VecVecUInt8_set_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1, swig_intgo arg2, uintptr_t arg3);
extern void _wrap_delete_VecVecUInt8_rs_ezpwd_2e6af9f303f3009f(uintptr_t arg1);
extern uintptr_t _wrap_encode_rs_ezpwd_2e6af9f303f3009f(swig_intgo arg1, uintptr_t arg2);
extern uintptr_t _wrap_decode_rs_ezpwd_2e6af9f303f3009f(swig_intgo arg1, uintptr_t arg2, uintptr_t arg3);
#undef intgo
*/
import "C"

import "unsafe"
import _ "runtime/cgo"
import "sync"


type _ unsafe.Pointer



var Swig_escape_always_false bool
var Swig_escape_val interface{}


type _swig_fnptr *byte
type _swig_memberptr *byte


type _ sync.Mutex

func Swig_free(arg1 uintptr) {
	_swig_i_0 := arg1
	C._wrap_Swig_free_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0))
}

func Swig_malloc(arg1 int) (_swig_ret uintptr) {
	var swig_r uintptr
	_swig_i_0 := arg1
	swig_r = (uintptr)(C._wrap_Swig_malloc_rs_ezpwd_2e6af9f303f3009f(C.swig_intgo(_swig_i_0)))
	return swig_r
}

type SwigcptrVecUInt8 uintptr

func (p SwigcptrVecUInt8) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrVecUInt8) SwigIsVecUInt8() {
}

func NewVecUInt8__SWIG_0() (_swig_ret VecUInt8) {
	var swig_r VecUInt8
	swig_r = (VecUInt8)(SwigcptrVecUInt8(C._wrap_new_VecUInt8__SWIG_0_rs_ezpwd_2e6af9f303f3009f()))
	return swig_r
}

func NewVecUInt8__SWIG_1(arg1 int64) (_swig_ret VecUInt8) {
	var swig_r VecUInt8
	_swig_i_0 := arg1
	swig_r = (VecUInt8)(SwigcptrVecUInt8(C._wrap_new_VecUInt8__SWIG_1_rs_ezpwd_2e6af9f303f3009f(C.swig_type_1(_swig_i_0))))
	return swig_r
}

func NewVecUInt8__SWIG_2(arg1 VecUInt8) (_swig_ret VecUInt8) {
	var swig_r VecUInt8
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (VecUInt8)(SwigcptrVecUInt8(C._wrap_new_VecUInt8__SWIG_2_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func NewVecUInt8(a ...interface{}) VecUInt8 {
	argc := len(a)
	if argc == 0 {
		return NewVecUInt8__SWIG_0()
	}
	if argc == 1 {
		if _, ok := a[0].(int64); !ok {
			goto check_2
		}
		return NewVecUInt8__SWIG_1(a[0].(int64))
	}
check_2:
	if argc == 1 {
		return NewVecUInt8__SWIG_2(a[0].(VecUInt8))
	}
	panic("No match for overloaded function call")
}

func (arg1 SwigcptrVecUInt8) Size() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_VecUInt8_size_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrVecUInt8) Capacity() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_VecUInt8_capacity_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrVecUInt8) Reserve(arg2 int64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_VecUInt8_reserve_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0), C.swig_type_4(_swig_i_1))
}

func (arg1 SwigcptrVecUInt8) IsEmpty() (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	swig_r = (bool)(C._wrap_VecUInt8_isEmpty_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrVecUInt8) Clear() {
	_swig_i_0 := arg1
	C._wrap_VecUInt8_clear_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0))
}

func (arg1 SwigcptrVecUInt8) Add(arg2 byte) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_VecUInt8_add_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0), C.char(_swig_i_1))
}

func (arg1 SwigcptrVecUInt8) Get(arg2 int) (_swig_ret byte) {
	var swig_r byte
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (byte)(C._wrap_VecUInt8_get_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func (arg1 SwigcptrVecUInt8) Set(arg2 int, arg3 byte) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	C._wrap_VecUInt8_set_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.char(_swig_i_2))
}

func DeleteVecUInt8(arg1 VecUInt8) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_VecUInt8_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0))
}

type VecUInt8 interface {
	Swigcptr() uintptr
	SwigIsVecUInt8()
	Size() (_swig_ret int64)
	Capacity() (_swig_ret int64)
	Reserve(arg2 int64)
	IsEmpty() (_swig_ret bool)
	Clear()
	Add(arg2 byte)
	Get(arg2 int) (_swig_ret byte)
	Set(arg2 int, arg3 byte)
}

type SwigcptrVecInt uintptr

func (p SwigcptrVecInt) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrVecInt) SwigIsVecInt() {
}

func NewVecInt__SWIG_0() (_swig_ret VecInt) {
	var swig_r VecInt
	swig_r = (VecInt)(SwigcptrVecInt(C._wrap_new_VecInt__SWIG_0_rs_ezpwd_2e6af9f303f3009f()))
	return swig_r
}

func NewVecInt__SWIG_1(arg1 int64) (_swig_ret VecInt) {
	var swig_r VecInt
	_swig_i_0 := arg1
	swig_r = (VecInt)(SwigcptrVecInt(C._wrap_new_VecInt__SWIG_1_rs_ezpwd_2e6af9f303f3009f(C.swig_type_5(_swig_i_0))))
	return swig_r
}

func NewVecInt__SWIG_2(arg1 VecInt) (_swig_ret VecInt) {
	var swig_r VecInt
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (VecInt)(SwigcptrVecInt(C._wrap_new_VecInt__SWIG_2_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func NewVecInt(a ...interface{}) VecInt {
	argc := len(a)
	if argc == 0 {
		return NewVecInt__SWIG_0()
	}
	if argc == 1 {
		if _, ok := a[0].(int64); !ok {
			goto check_2
		}
		return NewVecInt__SWIG_1(a[0].(int64))
	}
check_2:
	if argc == 1 {
		return NewVecInt__SWIG_2(a[0].(VecInt))
	}
	panic("No match for overloaded function call")
}

func (arg1 SwigcptrVecInt) Size() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_VecInt_size_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrVecInt) Capacity() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_VecInt_capacity_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrVecInt) Reserve(arg2 int64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_VecInt_reserve_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0), C.swig_type_8(_swig_i_1))
}

func (arg1 SwigcptrVecInt) IsEmpty() (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	swig_r = (bool)(C._wrap_VecInt_isEmpty_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrVecInt) Clear() {
	_swig_i_0 := arg1
	C._wrap_VecInt_clear_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0))
}

func (arg1 SwigcptrVecInt) Add(arg2 int) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_VecInt_add_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1))
}

func (arg1 SwigcptrVecInt) Get(arg2 int) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_VecInt_get_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func (arg1 SwigcptrVecInt) Set(arg2 int, arg3 int) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	C._wrap_VecInt_set_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.swig_intgo(_swig_i_2))
}

func DeleteVecInt(arg1 VecInt) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_VecInt_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0))
}

type VecInt interface {
	Swigcptr() uintptr
	SwigIsVecInt()
	Size() (_swig_ret int64)
	Capacity() (_swig_ret int64)
	Reserve(arg2 int64)
	IsEmpty() (_swig_ret bool)
	Clear()
	Add(arg2 int)
	Get(arg2 int) (_swig_ret int)
	Set(arg2 int, arg3 int)
}

type SwigcptrVecVecUInt8 uintptr

func (p SwigcptrVecVecUInt8) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrVecVecUInt8) SwigIsVecVecUInt8() {
}

func NewVecVecUInt8__SWIG_0() (_swig_ret VecVecUInt8) {
	var swig_r VecVecUInt8
	swig_r = (VecVecUInt8)(SwigcptrVecVecUInt8(C._wrap_new_VecVecUInt8__SWIG_0_rs_ezpwd_2e6af9f303f3009f()))
	return swig_r
}

func NewVecVecUInt8__SWIG_1(arg1 int64) (_swig_ret VecVecUInt8) {
	var swig_r VecVecUInt8
	_swig_i_0 := arg1
	swig_r = (VecVecUInt8)(SwigcptrVecVecUInt8(C._wrap_new_VecVecUInt8__SWIG_1_rs_ezpwd_2e6af9f303f3009f(C.swig_type_9(_swig_i_0))))
	return swig_r
}

func NewVecVecUInt8__SWIG_2(arg1 VecVecUInt8) (_swig_ret VecVecUInt8) {
	var swig_r VecVecUInt8
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (VecVecUInt8)(SwigcptrVecVecUInt8(C._wrap_new_VecVecUInt8__SWIG_2_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func NewVecVecUInt8(a ...interface{}) VecVecUInt8 {
	argc := len(a)
	if argc == 0 {
		return NewVecVecUInt8__SWIG_0()
	}
	if argc == 1 {
		if _, ok := a[0].(int64); !ok {
			goto check_2
		}
		return NewVecVecUInt8__SWIG_1(a[0].(int64))
	}
check_2:
	if argc == 1 {
		return NewVecVecUInt8__SWIG_2(a[0].(VecVecUInt8))
	}
	panic("No match for overloaded function call")
}

func (arg1 SwigcptrVecVecUInt8) Size() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_VecVecUInt8_size_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrVecVecUInt8) Capacity() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_VecVecUInt8_capacity_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrVecVecUInt8) Reserve(arg2 int64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_VecVecUInt8_reserve_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0), C.swig_type_12(_swig_i_1))
}

func (arg1 SwigcptrVecVecUInt8) IsEmpty() (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	swig_r = (bool)(C._wrap_VecVecUInt8_isEmpty_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrVecVecUInt8) Clear() {
	_swig_i_0 := arg1
	C._wrap_VecVecUInt8_clear_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0))
}

func (arg1 SwigcptrVecVecUInt8) Add(arg2 VecUInt8) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	C._wrap_VecVecUInt8_add_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1))
}

func (arg1 SwigcptrVecVecUInt8) Get(arg2 int) (_swig_ret VecUInt8) {
	var swig_r VecUInt8
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (VecUInt8)(SwigcptrVecUInt8(C._wrap_VecVecUInt8_get_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1))))
	return swig_r
}

func (arg1 SwigcptrVecVecUInt8) Set(arg2 int, arg3 VecUInt8) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	C._wrap_VecVecUInt8_set_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.uintptr_t(_swig_i_2))
}

func DeleteVecVecUInt8(arg1 VecVecUInt8) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_VecVecUInt8_rs_ezpwd_2e6af9f303f3009f(C.uintptr_t(_swig_i_0))
}

type VecVecUInt8 interface {
	Swigcptr() uintptr
	SwigIsVecVecUInt8()
	Size() (_swig_ret int64)
	Capacity() (_swig_ret int64)
	Reserve(arg2 int64)
	IsEmpty() (_swig_ret bool)
	Clear()
	Add(arg2 VecUInt8)
	Get(arg2 int) (_swig_ret VecUInt8)
	Set(arg2 int, arg3 VecUInt8)
}

func Encode(arg1 uint, arg2 VecUInt8) (_swig_ret VecUInt8) {
	var swig_r VecUInt8
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	swig_r = (VecUInt8)(SwigcptrVecUInt8(C._wrap_encode_rs_ezpwd_2e6af9f303f3009f(C.swig_intgo(_swig_i_0), C.uintptr_t(_swig_i_1))))
	return swig_r
}

func Decode(arg1 uint, arg2 VecUInt8, arg3 VecInt) (_swig_ret VecUInt8) {
	var swig_r VecUInt8
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (VecUInt8)(SwigcptrVecUInt8(C._wrap_decode_rs_ezpwd_2e6af9f303f3009f(C.swig_intgo(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2))))
	return swig_r
}


